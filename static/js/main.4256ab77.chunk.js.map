{"version":3,"sources":["components/Loader/Loader.jsx","components/Card/Card.jsx","components/TextField/TextField.jsx","hooks/useFetch.js","components/Answer.jsx","components/Exercise.jsx","helpers/getRandomElementFromArray.js","components/Page.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Loader","useStyles","makeStyles","root","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","Card","children","classes","className","CardContent","Typography","variant","component","gutterBottom","TextField","value","id","label","onChange","onFocus","onBlur","autoComplete","useFetch","url","useState","isLoading","setIsLoading","verbs","setVerbs","useEffect","fetch","then","response","json","data","Answer","htmlId","inputValue","setInputValue","showAnswer","setshowAnswer","answerCssClass","setAnswerCssClass","event","target","verb","answer","length","split","find","option","toLowerCase","defaultProps","Exercise","past","pastParticiple","getRandomElementFromArray","array","Math","floor","random","Page","App","location","useLocation","infinitive","setVerb","getRandomVerb","to","pathname","exact","path","render","htmlFor","type","list","v","map","key","_id","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4256ab77.chunk.js","sourcesContent":["import React from 'react';\n\nconst Loader = () => {\n  return <h2>Loading...</h2>;\n};\nexport default Loader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MuiCard from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 18,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nfunction Card({ title, children }) {\n  const classes = useStyles();\n  return (\n    <MuiCard className={classes.root}>\n      <CardContent>\n        <Typography variant=\"h3\" component=\"h2\" gutterBottom>\n          {title}\n        </Typography>\n        {children}\n      </CardContent>\n    </MuiCard>\n  );\n}\nCard.propTypes = {\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]).isRequired,\n  children: PropTypes.node.isRequired,\n};\nexport default Card;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// import { makeStyles } from '@material-ui/core/styles';\nimport MuiTextField from '@material-ui/core/TextField';\n\n// const useStyles = makeStyles((theme) => ({\n//   root: {\n//     '& > *': {\n//       margin: theme.spacing(1),\n//       width: '25ch',\n//     },\n//   },\n// }));\n\nfunction TextField({ value, id, label, onChange, onFocus, onBlur }) {\n  return (\n    <MuiTextField\n      id={id}\n      label={label}\n      variant=\"outlined\"\n      value={value}\n      onChange={onChange}\n      onFocus={onFocus}\n      onBlur={onBlur}\n      autoComplete=\"off\"\n    />\n  );\n}\nTextField.propTypes = {\n  value: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onFocus: PropTypes.func.isRequired,\n  onBlur: PropTypes.func.isRequired,\n};\nexport default TextField;\n","import { useEffect, useState } from 'react';\n\nconst useFetch = (url) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [verbs, setVerbs] = useState([]);\n  useEffect(() => {\n    fetch(url)\n      .then((response) => response.json())\n      .then((json) => {\n        setVerbs(json.data);\n        setIsLoading(false);\n      });\n  }, [url]);\n\n  return { verbs, isLoading };\n};\n\nexport default useFetch;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { TextField } from 'components';\n\nconst Answer = ({ children, value, htmlId }) => {\n  const [inputValue, setInputValue] = useState('');\n  const [showAnswer, setshowAnswer] = useState(false);\n  const [answerCssClass, setAnswerCssClass] = useState(null);\n\n  const handleVerbChange = (event) => {\n    setInputValue(event.target.value);\n  };\n  const handleVerbFocus = () => {\n    setshowAnswer(false);\n    setAnswerCssClass(null);\n  };\n\n  const isAnswerCorrect = (verb, answer) => {\n    const possibleAnswers = verb.split('/');\n    return !!possibleAnswers.find(\n      (option) => option.toLowerCase() === answer.toLowerCase()\n    );\n  };\n\n  const handleVerbCheck = (event) => {\n    if (event.target.value.length > 1) {\n      setshowAnswer(true);\n      setAnswerCssClass(\n        isAnswerCorrect(value, event.target.value)\n          ? 'answer--isCorrect'\n          : 'answer--isIncorrect'\n      );\n    }\n  };\n\n  return (\n    <div className={`answer ${answerCssClass}`}>\n      <TextField\n        id={htmlId}\n        label={children}\n        value={inputValue}\n        onFocus={handleVerbFocus}\n        onChange={handleVerbChange}\n        onBlur={handleVerbCheck}\n      />\n      {showAnswer && <span className=\"answer__definition\">{value}</span>}\n    </div>\n  );\n};\n\nAnswer.propTypes = {\n  value: PropTypes.string.isRequired,\n  htmlId: PropTypes.string,\n  children: PropTypes.node,\n};\n\nAnswer.defaultProps = {\n  htmlId: 'answer',\n  children: <></>,\n};\n\nexport default Answer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Card } from 'components';\nimport Answer from './Answer';\n\nconst Exercise = ({ verb, children }) => {\n  if (!verb) {\n    return (\n      <span className=\"answers answers--error\">\n        &quot;Invalid word :(&quot;\n      </span>\n    );\n  }\n  return (\n    <Card title={children}>\n      <div className=\"Exercise\">\n        {/* <div className=\"question\">{children}</div> */}\n        <>\n          <Answer value={verb.past} htmlId=\"firstAnswer\">\n            Past\n          </Answer>\n          <Answer value={verb.pastParticiple} htmlId=\"secondAnswer\">\n            Past Participle\n          </Answer>\n        </>\n      </div>\n    </Card>\n  );\n};\n\nExercise.propTypes = {\n  verb: PropTypes.objectOf(\n    PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n  ).isRequired,\n  children: PropTypes.node,\n};\n\nExercise.defaultProps = {\n  children: <></>,\n};\nexport default Exercise;\n","const getRandomElementFromArray = (array) => {\n  const randomIndex = Math.floor(Math.random() * array.length);\n  return array[randomIndex];\n};\n\nexport default getRandomElementFromArray;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Page = ({ title, children }) => {\n  return (\n    <section className=\"Page\">\n      <h2 className=\"PageTitle\">{title}</h2>\n      <div className=\"PageContent\">{children}</div>\n    </section>\n  );\n};\n\nPage.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.element.isRequired,\n};\n\nPage.defaultProps = {};\n\nexport default Page;\n","import React, { useState, useEffect } from 'react';\nimport { Route, Switch, Link, useLocation, Redirect } from 'react-router-dom';\n\nimport { Loader } from 'components';\nimport useFetch from './hooks/useFetch';\nimport Exercise from './components/Exercise';\nimport getRandomVerb from './helpers/getRandomElementFromArray';\n\nimport './App.css';\nimport Page from './components/Page';\n\nfunction App() {\n  const emptyVerb = {\n    infinitive: '',\n    past: '',\n    pastParticiple: '',\n  };\n\n  const location = useLocation();\n\n  const { verbs, isLoading } = useFetch(\n    'https://iverbapi.herokuapp.com/api/all'\n  );\n  const [verb, setVerb] = useState(emptyVerb);\n\n  useEffect(() => {\n    if (verbs.length > 0) {\n      setVerb(getRandomVerb(verbs));\n    }\n  }, [verbs]);\n\n  const handleVerbSearch = (event) => {\n    const { value } = event.target;\n    if (value) {\n      setVerb(verbs.find((v) => v.infinitive === value));\n    }\n  };\n\n  if (isLoading) {\n    return <Loader />;\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>\n          <Link to=\"/\">Verber</Link>\n        </h1>\n      </header>\n      <main>\n        {location.pathname === '/' && (\n          <nav className=\"AppNav\">\n            <div className=\"AppNavItem\">\n              <Link to=\"/search\">Search for a verb</Link>\n            </div>\n            <div className=\"AppNavItem\">\n              <Link to=\"/challenge\">Take a challenge</Link>\n            </div>\n          </nav>\n        )}\n\n        <Switch>\n          <Route exact path=\"/\" render={() => <Redirect to=\"/challenge\" />} />\n          <Route path=\"/search\">\n            <Page title=\"Search\">\n              <div className=\"verbFinder\">\n                <form>\n                  <Exercise verb={verb}>\n                    <label htmlFor=\"questionInput\">\n                      Find infinitive form verb\n                    </label>\n                    <input\n                      id=\"questionInput\"\n                      type=\"search\"\n                      list=\"verbs\"\n                      autoComplete=\"off\"\n                      onBlur={handleVerbSearch}\n                    />\n                    <datalist id=\"verbs\">\n                      {verbs.map((v) => (\n                        <option key={`option-${v._id}`}>{v.infinitive}</option>\n                      ))}\n                    </datalist>\n                  </Exercise>\n                </form>\n              </div>\n            </Page>\n          </Route>\n          <Route path=\"/challenge\">\n            <Page title=\"Challenge\">\n              <div className=\"verbFinder\">\n                <form>\n                  <Exercise verb={verb}>\n                    <div className=\"RandomVerb\">{verb.infinitive}</div>\n                  </Exercise>\n                </form>\n              </div>\n            </Page>\n          </Route>\n        </Switch>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}