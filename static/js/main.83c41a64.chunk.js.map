{"version":3,"sources":["hooks/useFetch.js","components/Answer.jsx","App.js","serviceWorker.js","index.js"],"names":["useFetch","url","useState","verbs","setVerbs","useEffect","fetch","then","response","json","data","Answer","props","children","verb","inputValue","setInputValue","showAnswer","setshowAnswer","answerCssClass","setAnswerCssClass","className","htmlFor","id","type","value","onFocus","event","onChange","target","onBlur","length","split","find","option","toLowerCase","isAnswerCorrect","App","infinitive","past","pastParticiple","setVerb","list","autoComplete","map","key","_id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAaeA,EAXE,SAACC,GAAS,IAAD,EACIC,mBAAS,IADb,mBACfC,EADe,KACRC,EADQ,KAQxB,OANEC,qBAAU,WACNC,MAAML,GACDM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIL,EAASK,EAAKC,WACrC,CAACT,IAEKE,GCqCMQ,EA7CA,SAACC,GAAW,IAElBC,EAAkBD,EAAlBC,SAAUC,EAAQF,EAARE,KAFO,EAIYZ,mBAAS,IAJrB,mBAIjBa,EAJiB,KAILC,EAJK,OAKYd,oBAAS,GALrB,mBAKjBe,EALiB,KAKLC,EALK,OAMoBhB,mBAAS,MAN7B,mBAMjBiB,EANiB,KAMDC,EANC,KA6BxB,OACE,yBAAKC,UAAS,iBAAYF,IACxB,2BAAOG,QAAQ,oBAAoBT,GACnC,2BACEU,GAAG,mBACHC,KAAK,OACLC,MAAOV,EACPW,QAzBkB,SAACC,GACvBT,GAAc,GACdE,EAAkB,OAwBdQ,SA7BmB,SAACD,GACxBX,EAAcW,EAAME,OAAOJ,QA6BvBK,OAjBkB,SAACH,GAAW,IAC3BF,EAASE,EAAME,OAAfJ,MACJA,EAAMM,OAAS,IAChBb,GAAc,GACdE,EAToB,SAACN,EAAMC,GAE7B,QADwBD,EAAKkB,MAAM,KACVC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,gBAAkBpB,EAAWoB,iBAOxDC,CAAgBtB,EAAMW,GAAS,oBAAsB,2BAetER,GAAc,0BAAMI,UAAU,sBAAsBP,K,MCgB5CuB,MAnDf,WAEE,IAAMlC,EAAQH,EAAS,0CAFV,EAGWE,mBAAS,CAC/BoC,WAAY,GACZC,KAAM,GACNC,eAAgB,KANL,mBAGN1B,EAHM,KAGA2B,EAHA,KAgBb,OACE,yBAAKpB,UAAU,OACb,4BAAQA,UAAU,cAChB,uCAEF,8BACE,6BAASA,UAAU,cACjB,2CACA,8BACE,yBAAKA,UAAU,YACf,2BAAOC,QAAQ,oBAAf,6BACA,2BACEC,GAAG,gBACHC,KAAK,SACLkB,KAAK,QACLC,aAAa,MACbb,OAvBa,SAACH,GAAW,IAC5BF,EAASE,EAAME,OAAfJ,MACJA,GACDgB,EAAQtC,EAAM8B,MAAK,SAAAnB,GAAI,OAAIA,EAAKwB,aAAeb,SAsBzC,8BAAUF,GAAG,SACVpB,EAAMyC,KAAI,SAAA9B,GAAI,OACb,4BAAQ+B,IAAG,iBAAY/B,EAAKgC,MAAQhC,EAAKwB,iBAI5CxB,EAAO,yBAAKO,UAAU,WACrB,kBAAC,EAAD,CAAQP,KAAMA,EAAKyB,MAAnB,QACA,kBAAC,EAAD,CAAQzB,KAAMA,EAAK0B,gBAAnB,oBACO,0BAAMnB,UAAU,0BAAhB,0BCtCD0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpD,MAAK,SAAAqD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.83c41a64.chunk.js","sourcesContent":["import {useEffect, useState} from 'react';\r\n\r\nconst useFetch = (url) => {\r\n    const [verbs, setVerbs] = useState([]);\r\n    useEffect(() => {\r\n        fetch(url)\r\n            .then(response => response.json())\r\n            .then(json => setVerbs(json.data));\r\n}, [url])\r\n\r\n  return verbs;\r\n}\r\n\r\nexport default useFetch;","import React, { useState } from 'react';\r\n\r\nconst Answer = (props) => {\r\n\r\n  const {children, verb} = props;\r\n\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [showAnswer, setshowAnswer] = useState(false);\r\n  const [answerCssClass, setAnswerCssClass] = useState(null)\r\n\r\n  const handleVerbChange = (event) => {\r\n    setInputValue(event.target.value);\r\n  }\r\n  const handleVerbFocus = (event) => {\r\n    setshowAnswer(false);\r\n    setAnswerCssClass(null);\r\n  }\r\n\r\n  const isAnswerCorrect = (verb, inputValue) => {\r\n    const possibleAnswers = verb.split('/');\r\n    return !!possibleAnswers.find(option => option.toLowerCase() === inputValue.toLowerCase());\r\n  }\r\n\r\n  const handleVerbCheck = (event) => {\r\n    const {value} = event.target;\r\n    if(value.length > 1) {\r\n      setshowAnswer(true);\r\n      setAnswerCssClass(isAnswerCorrect(verb, value) ? 'answer--isCorrect' : 'answer--isInCorrect')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={`answer ${answerCssClass}`}>\r\n      <label htmlFor=\"firstAnswerInput\">{children}</label>\r\n      <input\r\n        id=\"firstAnswerInput\"\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onFocus={handleVerbFocus}\r\n        onChange={handleVerbChange}\r\n        onBlur={handleVerbCheck}\r\n      />\r\n      {showAnswer && <span className=\"answer__definition\">{verb}</span>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Answer;","import React, {useState} from 'react';\n\nimport useFetch from './hooks/useFetch';\nimport Answer from './components/Answer';\n\nimport './App.css';\n\nfunction App() {\n\n  const verbs = useFetch('https://iverbapi.herokuapp.com/api/all')\n  const [verb, setVerb] = useState({\n    infinitive: \"\",\n    past: \"\",\n    pastParticiple: \"\"\n  });\n\n  const handleVerbSearch = (event) => {\n    const {value} = event.target;\n    if(value) {\n      setVerb(verbs.find(verb => verb.infinitive === value))\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Verber</h1>\n      </header>\n      <main>\n        <section className=\"verbFinder\">\n          <h2>Find a verb</h2>\n          <form>\n            <div className=\"question\">\n            <label htmlFor=\"firstAnswerInput\">Find infinitive form verb</label>\n            <input\n              id=\"questionInput\" \n              type=\"search\" \n              list=\"verbs\" \n              autoComplete=\"off\" \n              onBlur={handleVerbSearch}\n            />\n            <datalist id=\"verbs\">\n              {verbs.map(verb => (\n                <option key={`option-${verb._id}`}>{verb.infinitive}</option>\n              ))}  \n            </datalist> \n            </div>\n            {verb ? <div className=\"answers\">\n              <Answer verb={verb.past}>Past</Answer>\n              <Answer verb={verb.pastParticiple}>Past Participle</Answer>\n            </div> : <span className=\"answers answers--error\">\"Invalid word :(\"</span>}\n          </form>\n        </section> \n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}